def parse(self):
        result = self.expr()
        if self.current_token.type != TokenType.EOF:
            raise SyntaxError("Unexpected input after complete expression")
        return result


    def expr(self):
        result = self.power()
        while self.current_token.type == TokenType.POWER:
            self.consume(TokenType.POWER)
            exponent = self.power()
            if not exponent.isdigit():
                raise ValueError("Right-hand side of '^' must be a number")
            result = result * int(exponent)
        return result

    
    def power(self):
        return self.reverse()

    
    def reverse(self):
        if self.current_token.type == TokenType.REVERSE:
            self.consume(TokenType.REVERSE)
            value = self.reverse()
            return value[::-1]
        else:
            return self.concat()

    
    def concat(self):
        result = self.factor()
        while self.current_token.type == TokenType.CONCAT:
            self.consume(TokenType.CONCAT)
            result += self.factor()
        return result

    
    def factor(self):
        if self.current_token.type == TokenType.STRING:
            value = self.current_token.attribute
            self.consume(TokenType.STRING)
            return value
        elif self.current_token.type == TokenType.NUMBER:
            value = str(self.current_token.attribute)
            self.consume(TokenType.NUMBER)
            return value
        elif self.current_token.type == TokenType.LPAREN:
            self.consume(TokenType.LPAREN)
            value = self.expr()
            self.consume(TokenType.RPAREN)
            return value
        else:
            raise SyntaxError(f"Syntax error: expected STRING, NUMBER or '(', but found {self.current_token.type}")
